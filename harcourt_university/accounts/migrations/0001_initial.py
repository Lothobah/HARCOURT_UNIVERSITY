# Generated by Django 5.2.6 on 2025-09-24 21:07

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('tutor', 'Tutor'), ('admin', 'Admin')], default='student', max_length=10)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=15)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('is_verified', models.BooleanField(default=False)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('education_level', models.CharField(choices=[('primary', 'Primary School'), ('junior_high', 'Junior High School'), ('senior_high', 'Senior High School'), ('university', 'University'), ('professional', 'Professional Development'), ('other', 'Other')], max_length=20)),
                ('school_name', models.CharField(blank=True, max_length=200)),
                ('subjects_of_interest', models.TextField(help_text='List subjects you need help with (comma-separated)')),
                ('preferred_mode', models.CharField(choices=[('online', 'Online Only'), ('in_person', 'In-Person Only'), ('both', 'Both Online & In-Person')], default='both', max_length=10)),
                ('budget_range', models.CharField(blank=True, help_text='e.g., GHS 20-50 per hour', max_length=50)),
                ('learning_goals', models.TextField(blank=True, help_text='What do you want to achieve?')),
                ('preferred_language', models.CharField(default='English', max_length=50)),
                ('emergency_contact', models.CharField(blank=True, max_length=100)),
                ('parent_guardian_name', models.CharField(blank=True, max_length=100)),
                ('parent_guardian_phone', models.CharField(blank=True, max_length=15)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TutorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(help_text='Tell students about yourself', max_length=1000)),
                ('qualifications', models.TextField(help_text='List your educational qualifications and certifications')),
                ('subjects_offered', models.TextField(help_text='List subjects you can teach (comma-separated)')),
                ('experience', models.CharField(choices=[('0-1', '0-1 years'), ('1-3', '1-3 years'), ('3-5', '3-5 years'), ('5-10', '5-10 years'), ('10+', '10+ years')], max_length=10)),
                ('hourly_rate', models.DecimalField(decimal_places=2, help_text='Rate in GHS per hour', max_digits=10)),
                ('availability', models.TextField(help_text='Describe your availability (days/times)')),
                ('teaching_mode', models.CharField(choices=[('online', 'Online Only'), ('in_person', 'In-Person Only'), ('both', 'Both Online & In-Person')], default='both', max_length=10)),
                ('languages_spoken', models.CharField(default='English', max_length=200)),
                ('id_document', models.FileField(blank=True, null=True, upload_to='tutor_docs/ids/')),
                ('certifications', models.FileField(blank=True, null=True, upload_to='tutor_docs/certs/')),
                ('verification_status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('verification_notes', models.TextField(blank=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('subscription_active', models.BooleanField(default=False)),
                ('subscription_expiry', models.DateTimeField(blank=True, null=True)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_sessions', models.IntegerField(default=0)),
                ('total_students', models.IntegerField(default=0)),
                ('response_time', models.IntegerField(default=24, help_text='Average response time in hours')),
                ('linkedin_url', models.URLField(blank=True)),
                ('website_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tutor_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-rating', '-created_at'],
            },
        ),
    ]
